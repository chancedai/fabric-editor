import fonts from "./fonts.js";

// fonts 根据 id 排重
const uniqueFonts = fonts.filter((font, index, self) =>
  index === self.findIndex((t) => t.id === font.id)
);

const words = {
  symbolCats: {
    animals: "动物",
    arrows: "箭头",
    basic: "基础",
    balloon: "对话气泡",
    electronics: "电子产品",
    flowchart: "流程图",
    game: "游戏",
    math: "数学",
    music: "音乐",
    object: "对象",
    symbol: "符号",
    misc: "杂项",
    other: "其他",
  },
  1020: "英文",
  1030: "否",
  1031: "是",
  1032: "取消",
  1033: "确定",
  1034: "应用",
  1035: "关闭",
  1036: "返回",
  1047: "锁定",
  1052: "颜色",
  1066: "文件名",
  1068: "在线保存",
  1070: "您的海报已成功保存。",
  1071: "直接链接",
  1072: "由 #1 制作",
  1073: "适用于网站的 HTML",
  1074: "适用于论坛的 BBcode",
  1075: "分享到社交媒体",
  1081: "确定要完全删除此图像吗？",
  1085: "文件类型",
  1086: "注意",
  1087: "另存为图片",
  1088: "另存为 #1",
  1090: "将对象另存为 PNG",
  1091: "删除对象",
  1092: "克隆对象",
  1093: "确定要清空画布吗？",
  1094: "编辑文本",
  1095: "水平翻转",
  1096: "垂直翻转",
  1097: "顺时针旋转 90°",
  1098: "逆时针旋转 90°",
  1099: "下移",
  1100: "上移",
  1101: "保存海报",
  1102: "下载",
  1107: "编辑图像",
  1108: "缩放和平移",
  1109: "边框",
  1110: "形状",
  1111: "边框宽度",
  1112: "边框颜色",
  1113: "重置缩放/平移",
  1114: "放大",
  1115: "缩小",
  1116: "亮度",
  1117: "噪点",
  1118: "像素化",
  1119: "复古",
  1120: "棕褐色",
  1121: "灰度",
  1122: "模糊",
  1123: "锐化",
  1124: "浮雕",
  1125: "黑白",
  1126: "布朗尼",
  1127: "柯达克罗姆",
  1128: "科技色彩",
  1129: "宝丽来",
  1130: "饱和度",
  1131: "对比度",
  1132: "图像滤镜",
  1133: "柔边",
  1134: "尺寸",
  1135: "保持纵横比",
  1136: "保存",
  1153: "图片大小",
  1154: "角度",
  1155: "行高",
  1171: "横向打印尺寸",
  1172: "纵向打印尺寸",
  1173: "选择尺寸",
  1175: "无效尺寸",
  1176: "宽度不能超过 #1。",
  1177: "高度不能超过 #1。",
  1178: "屏幕尺寸",
  1179: "自定义屏幕尺寸",
  1180: "宽 高",
  1188: "在线保存/分享",
  1189: "当前",
  1190: "历史",
  1191: "嵌入/分享",
  1192: "暂无历史记录。",
  1231: "编辑结果",
  1232: "点击按钮进一步编辑您的海报：添加边框、修改颜色、应用特殊滤镜和效果等。",
  1238: "图片",
  1246: "表情符号",
  1247: "搜索",
  1248: "缩放/拉伸画布上的对象以匹配新的图片尺寸。",
  1249: "此图像包含（半）透明像素。JPG 文件格式 <i>不支持</i> 透明。您是否要另存为支持透明的 PNG 格式？",
  1250: "弯曲文本的更改",
  1251: "我们对弯曲文本对象做了一些改动（2023年12月）：现在更易于操作并提供更多灵活性。因此，现有的弯曲文本对象可能已移动或显示略有不同。请根据需要编辑弯曲文本对象以进行调整。",
  1266: "文本",
  1267: "弯曲文本",
  1269: "装饰",
  1270: "图片 & 表情符号",
  1271: "叠加",
  1272: "边框",
  1273: "标尺",
  1274: "上传图片",
  1286: "阴影",
  1287: "不透明度",
  1291: "将鼠标悬停在画布上以查看颜色代码。点击复制 HEX 颜色代码到剪贴板。",
  1292: "颜色已复制到剪贴板。",
  1293: "容差",
  1294: "描边",
  1298: "图案",
  1299: "阴影距离",
  1300: "描边宽度",
  1301: "填充",
  1302: "圆形",
  1303: "正方形",
  1304: "水平线",
  1305: "垂直线",
  1306: "均匀",
  1307: "随机",
  1308: "X 轴偏移",
  1309: "Y 轴偏移",
  1310: "模糊",
  1311: "圆润度",
  1313: "移除叠加",
  1314: "尺寸",
  1315: "支持 GIF、JPG、PNG、WEBP、AVIF 和 SVG。",
  1316: "# 点数",
  1318: "符号",
  1319: "字体",
  1320: "字体颜色与大小",
  1321: "描边颜色与大小",
  1322: "尖锐度",
  1323: "段落对齐（多行）",
  1324: "左对齐",
  1325: "居中",
  1326: "右对齐",
  1327: "样式",
  1328: "加粗",
  1329: "下划线",
  1330: "斜体",
  1331: "背景颜色",
  1332: "字间距",
  1333: "背景板颜色",
  1334: "背景板偏移",
  1335: "在此输入",
  1336: "更多",
  1337: "圆角",
  1338: "翻转",
  1339: "您尚未保存您的海报。继续？",
  1340: "无法加载海报，可能是因为您正在加载较旧的 .json 文件。如需帮助，请<a href=\"#1\">联系我们</a>。",
  1352: "去除背景",
  1353: "象形图",
  1354: '如果您希望更精确地控制图片或照片的背景去除，请使用我们的网站 <a href="https://www.stripbackground.com/" target="_blank" title="从照片中去除背景">Stripbackground.com</a>。',
  1355: "对象属性",
  1356: "坐标，尺寸和旋转",
  1357: "宽度",
  1358: "高度",
  1360: "草图",
  1361: "填充样式",
  1362: "粗糙度",
  1363: "填充密度",
  1364: "图案角度",
  1365: "图案间隙",
  1366: "交叉线",
  1367: "实心",
  1368: "锯齿状",
  1369: "交叉阴影线",
  1370: "点状",
  1371: "虚线",
  1372: "锯齿线",
  1375: "扭曲文本",
  1376: "扭曲类型",
  1377: "圆形",
  1378: "直线",
  1379: "倾斜",
  1380: "顶部尺寸",
  1381: "底部尺寸",
  1390: "点击并按住（拖动）鼠标在画布上绘制形状。",
  1391: "点击画布以绘制多边形顶点。点击红色点或按 [Enter] 键以闭合多边形。",
  2000: "海报背景",
  2004: "浏览",
  2009: "将图片拖拽到此处，或 #1。",
  2025: "更多",
  2026: "宽 \u00d7 高",
  2028: "没有找到 #1 的结果。",
  2029: "在 #2 找到 #1 张图片。",
  4311: "在 Zazzle 上订购打印",
  4312: '从我们的合作伙伴 Zazzle 订购您的海报打印。如有关于订单的任何问题，请联系 <a href="#1" target="zazzle">Zazzle</a>。',
  4313: "更多产品",
};

const fontMap = uniqueFonts.reduce((acc, font) => {
  acc[font.id] = font;
  return acc;
}, {});

function getFontName(id) {
  const font = uniqueFonts.find((font) => font.id === id);
  if (font) {
    return font.cn || font.en;
  }
  return id;
}


const lib = (() => ({
    fonts: uniqueFonts,
    fontMap,
    getFontName,
    getFormData: (a) => {
      const b = new FormData();
      Object.keys(a).forEach((c) => b.append(c, a[c]));
      return b;
    },
    loadScript: (a) =>
      new Promise((b, c) => {
        const d = document.createElement("script");
        d.onerror = c;
        d.onload = b;
        d.src = a;
        document.head.appendChild(d);
      }),
    getDate: () => {
      var a = new Date();
      let b = a.getDate(),
        c = a.getMonth() + 1;
      a = a.getFullYear();
      10 > b && (b = "0" + b);
      10 > c && (c = "0" + c);
      return a + "-" + c + "-" + b;
    },
    readableFileSize: (a) => {
      let b;
      for (b = 0; 1024 <= a; ) (a /= 1024), ++b;
      return a.toFixed(1) + "B KB MB GB TB PB EB ZB YB".split(" ")[b];
    },
    shuffleArray: (a) => {
      for (
        let b, c, d = a.length;
        d;
        b = Math.floor(Math.random() * d), c = a[--d], a[d] = a[b], a[b] = c
      );
      return a;
    },
    getRandomInt: (a, b) => Math.floor(Math.random() * (b - a + 1)) + a,
    word: (...a) => {
      let b = words[a[0]];
      for (let c = 1; c < a.length; c++)
        b = b.replace(new RegExp("#" + c, "g"), a[c]);
      return b;
    },
    cookie: (a, b) => {
      var c = new Date();
      const d = {};
      var e = RegExp("(?:^|; )ZM=([^;]*)").exec(document.cookie);
      e = e ? decodeURIComponent(e[1]) : null;
      if (null !== e) {
        e = e.split("||");
        for (let f in e)
          try {
            const g = e[f].split("|", 2);
            d[g[0]] = g[1];
          } catch (g) {}
      }
      if (void 0 === b) return a in d ? JSON.parse(d[a]) : void 0;
      null === b || !1 === b ? delete d[a] : (d[a] = JSON.stringify(b));
      a = [];
      for (let f in d) a.push(f + "|" + d[f]);
      c.setTime(c.getTime() + 31536e6);
      c = "; expires=" + c.toGMTString();
      document.cookie =
        "ZM=" + encodeURIComponent(a.join("||")) + c + "; path=/; SameSite=Lax";
    }
  }))();
  export default lib;